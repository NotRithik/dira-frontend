/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * QueryMsg contains all queryable contract endpoints. These endpoints allow public access to the contract's state.
 */
export type QueryMsg =
  | {
      query_locked_collateral: {
        wallet_address_to_query: Addr;
      };
    }
  | {
      query_minted_dira: {
        wallet_address_to_query: Addr;
      };
    }
  | {
      query_stablecoin_health: {
        stablecoin_minter_address_to_query: Addr;
      };
    }
  | {
      query_collateral_price: {};
    }
  | {
      query_liquidation_health: {};
    }
  | {
      query_mintable_health: {};
    }
  | {
      query_admin_addresses: {};
    }
  | {
      query_collateral_token_denom: {};
    }
  | {
      query_c_w20_dira_contract_address: {};
    };
/**
 * A human readable address.
 *
 * In Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.
 *
 * This type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.
 *
 * This type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.
 */
export type Addr = string;
