/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A human readable address.
 *
 * In Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.
 *
 * This type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.
 *
 * This type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.
 */
export type Addr = string;
/**
 * A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0
 *
 * The greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)
 */
export type Decimal = string;

export interface QueryResponseMsg {
  admin_addresses_response: AdminAddressesResponse;
  collateral_price_response: CollateralPriceResponse;
  collateral_response: CollateralResponse;
  collateral_token_denom_response: CollateralTokenDenomResponse;
  cw20_dira_contract_address_response: CW20DiraContractAddressResponse;
  liquidation_health_response: LiquidationHealthResponse;
  mintable_health_response: MintableHealthResponse;
  minted_dira_response: MintedDiraResponse;
  stablecoin_health_response: StablecoinHealthResponse;
}
/**
 * Response for querying the list of admin addresses.
 */
export interface AdminAddressesResponse {
  admin_addresses: Addr[];
}
/**
 * Response for querying the collateral price.
 */
export interface CollateralPriceResponse {
  collateral_price: Decimal;
}
/**
 * Responses for each query Response for querying locked collateral.
 */
export interface CollateralResponse {
  collateral_locked: Decimal;
}
/**
 * Response for querying the collateral token denom.
 */
export interface CollateralTokenDenomResponse {
  collateral_token_denom: string;
}
/**
 * Response for querying the CW20 DIRA contract address.
 */
export interface CW20DiraContractAddressResponse {
  cw20_dira_contract_address?: Addr | null;
}
/**
 * Response for querying the liquidation health threshold.
 */
export interface LiquidationHealthResponse {
  liquidation_health: Decimal;
}
/**
 * Response for querying the mintable health threshold.
 */
export interface MintableHealthResponse {
  mintable_health: Decimal;
}
/**
 * Response for querying minted DIRA.
 */
export interface MintedDiraResponse {
  dira_minted: Decimal;
}
/**
 * Response for querying stablecoin health.
 */
export interface StablecoinHealthResponse {
  health: Decimal;
}
