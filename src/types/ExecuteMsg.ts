/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * ExecuteMsg contains all the executable contract endpoints.
 */
export type ExecuteMsg =
  | {
      lock_collateral: {};
    }
  | {
      unlock_collateral: {
        collateral_amount_to_unlock: Decimal;
      };
    }
  | {
      mint_dira: {
        dira_to_mint: Decimal;
      };
    }
  | {
      burn_dira: {
        dira_to_burn: Decimal;
      };
    }
  | {
      liquidate_stablecoins: {
        wallet_address_to_liquidate: Addr;
      };
    }
  | {
      set_collateral_price_in_dirham: {
        collateral_price_in_dirham: Decimal;
      };
    }
  | {
      set_liquidation_health: {
        liquidation_health: Decimal;
      };
    }
  | {
      set_mintable_health: {
        mintable_health: Decimal;
      };
    }
  | {
      set_c_w20_dira_contract_address: {
        cw20_dira_contract_address: Addr;
      };
    };
/**
 * A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0
 *
 * The greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)
 */
export type Decimal = string;
/**
 * A human readable address.
 *
 * In Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.
 *
 * This type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.
 *
 * This type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.
 */
export type Addr = string;
